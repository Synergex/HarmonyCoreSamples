;;*****************************************************************************
;;
;; Title:       Startup.dbl
;;
;; Description: Startup class for an OData / Web API hosting environment
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************
;;

import Harmony.AspNetCore
import Harmony.AspNetCore.Context
import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.FileIO
import Harmony.Core.Utility
import Harmony.OData
import Harmony.OData.Adapter
import Microsoft.AspNetCore.Builder
import Microsoft.AspNetCore.Hosting
import Microsoft.AspNetCore.Http
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.Mvc.Abstractions
import Microsoft.AspNetCore.Mvc.ApiExplorer
import Microsoft.AspNetCore.StaticFiles
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Extensions
import Microsoft.AspNet.OData.Builder
import Microsoft.AspNet.OData.Formatter
import Microsoft.AspNet.OData.Routing
import Microsoft.AspNet.OData.Routing.Conventions
import Microsoft.EntityFrameworkCore
import Microsoft.Extensions.Configuration
import Microsoft.Extensions.DependencyInjection
import Microsoft.Extensions.DependencyInjection.Extensions
import Microsoft.Extensions.Logging
import Microsoft.Extensions.Options
import Microsoft.Extensions.Primitives
import Microsoft.Net.Http.Headers
import Microsoft.OData
import Microsoft.OData.Edm
import Microsoft.OData.UriParser
import System.Collections.Generic
import System.IO
import System.Linq
import System.Text
import System.Threading.Tasks
import Services.Controllers
import Services.Models
import Swashbuckle.AspNetCore.Swagger
import Microsoft.OpenApi.Models

namespace Services

    ;;; <summary>
    ;;;
    ;;; </summary>
    public partial class Startup

        ;;; <summary>
        ;;; This property will be populated later by the default SelfHostEnvironment class.
        ;;; It wil contain a list of all of the logical names used to locate data files in the repository.
        ;;; This information can be useful if implementing a custom FileSpecResolver class, which is done
        ;;; in the Services Assembly, which is why the collection is defined here.
        ;;; </summary>
        public static readwrite property LogicalNames, @List<string>

        ;; Items provided by dependency injection
        public _env, @IHostingEnvironment
        public _config, @IConfiguration

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        ;;; <param name="env">HTTP hosting environment</param>
        ;;; <param name="config">Configuration data</param>
        public method Startup
            env, @IHostingEnvironment
            config, @IConfiguration
        proc
            _env = env
            _config = config
        endmethod

        ;;; <summary>
        ;;; This methoid is used to make services available to the application.
        ;;; These services are typically accessed via dependency injection in controller classes.
        ;;; The primary purpose of the ConfigureServices method is as a place to register
        ;;; implementations of types for services that are needed by the application.
        ;;; It is also used to configure any options related to those services.
        ;;; </summary>
        ;;; <param name="services">Collection of available services.</param>
        public method ConfigureServices, void
            services, @IServiceCollection
        proc
            ;;-------------------------------------------------------
            ;;Enable logging

            data log_level ,Microsoft.Extensions.Logging.LogLevel ,Microsoft.Extensions.Logging.LogLevel.Trace

            data logical ,a40
            data logLen ,int ,0
            xcall getlog('ASPNETCORE_LOG_LEVEL',logical,logLen)
            if (logLen)
            begin
                locase logical
                using logical(1:loglen)+' ' select
                ('0 ','trace '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.Trace
                ('1 ','debug '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.Debug
                ('2 ','information '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.Information
                ('3 ','warning '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.Warning
                ('4 ','error '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.Error
                ('5 ','critical '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.Critical
                ('6 ','none '),
                    log_level = Microsoft.Extensions.Logging.LogLevel.None
                (),
                    throw new Exception("Invalid value for logical ODATA_LOG_LEVEL="+logical(1:loglen))
                endusing
            end

            services.AddLogging(lambda(builder) { builder.SetMinimumLevel(log_level) })

            ;;-------------------------------------------------------
            ;;Make AppSettings available as a service

            lambda GetAppSettings(appSettingsInstance)
            begin
                appSettingsInstance.ProcessEnvironmentVariables()
                mreturn true
            end

            ;;Add an AppSettings service.
            ;;To get an instance from DI ask for an @IOptions<AppSettings>
            if(_config != ^null)
                services.AddOptions<AppSettings>().Validate(GetAppSettings).Bind(_config.GetSection("AppSettings"))

            services.AddCors()

            data mvcBuilder = services.AddMvcCore()
            &    .SetCompatibilityVersion(CompatibilityVersion.Version_2_2 )
            &    .AddDataAnnotations()      ;;Enable data annotations
			&	.AddNewtonsoftJson()      ;;For PATCH
            &   .AddApplicationPart(^typeof(TraditionalBridgeController).Assembly)

            ;;-------------------------------------------------------
            ;;Enable HTTP redirection to HTTPS

            lambda httpsConfig(options)
            begin
                options.RedirectStatusCode = StatusCodes.Status307TemporaryRedirect
                options.HttpsPort = 8086
            end

            services.AddHttpsRedirection(httpsConfig)

            ;;If there is a ConfigureServicesCustom method, call it
            ConfigureServicesCustom(services)

        endmethod

        private AppSettingsMonitor, @IDisposable

        ;;; <summary>
        ;;; This method is used to configure the ASP.NET WebApi request pipeline.
        ;;; </summary>
        ;;; <param name="app">IApplicationBuilder component that configures the request pipeline by having middleware added to it.</param>
        ;;; <param name="env">IHostingEnvironment that exposes information about the environment that is hosting the application.</param>
        public method Configure, void
            required in app, @IApplicationBuilder
            required in env, @IHostingEnvironment
        proc
            ;;-------------------------------------------------------
            ;;Configure the AppSettings environment

            data optionsMonitorObj, @IOptionsMonitor<AppSettings>, ServiceProviderServiceExtensions.GetService<IOptionsMonitor<AppSettings>>(app.ApplicationServices)
            AppSettingsMonitor = optionsMonitorObj.OnChange(lambda(opts, name) { opts.ProcessEnvironmentVariables() })
            data settings, @AppSettings, ServiceProviderServiceExtensions.GetService<IOptions<AppSettings>>(app.ApplicationServices).Value

            ;;-------------------------------------------------------
            ;;Configure development and production specific components

            if (env.IsDevelopment()) then
            begin
                data loggerFactory = app.ApplicationServices.GetRequiredService<ILoggerFactory>()
                app.UseDeveloperExceptionPage()

                data hc_log_level ,Harmony.Core.Interface.LogLevel ,Harmony.Core.Interface.LogLevel.Debug
                data logical ,a40
                data logLen ,int ,0
                xcall getlog('HARMONY_CORE_LOG_LEVEL',logical,logLen)
                if (logLen)
                begin
                    locase logical
                    using logical(1:loglen)+' ' select
                    ('0 ','trace '),
                        hc_log_level = Harmony.Core.Interface.LogLevel.Trace
                    ('1 ','debug '),
                        hc_log_level = Harmony.Core.Interface.LogLevel.Debug
                    ('2 ','information '),
                        hc_log_level = Harmony.Core.Interface.LogLevel.Info
                    ('3 ','warning '),
                        hc_log_level = Harmony.Core.Interface.LogLevel.Warning
                    ('4 ','error '),
                        hc_log_level = Harmony.Core.Interface.LogLevel.Error
                    ('5 ','critical '),
                        hc_log_level = Harmony.Core.Interface.LogLevel.Critical
                    (),
                        throw new Exception("Invalid value for logical HARMONY_CORE_LOG_LEVEL="+logical(1:loglen))
                    endusing
                end

                DebugLogSession.Logging = new AspNetCoreDebugLogger(loggerFactory.CreateLogger("HarmonyCore")) { Level = hc_log_level }
                app.UseLogging(DebugLogSession.Logging)
            end
            else
            begin
                ;;Enable HTTP Strict Transport Security Protocol (HSTS)
                ;
                ;You need to research this and know what you are doing with this. Here's a starting point:
                ;https://docs.microsoft.com/en-us/aspnet/core/security/enforcing-ssl?view=aspnetcore-2.1&tabs=visual-studio
                ;
                ;app.UseHsts()
            end

            ;;-------------------------------------------------------
            ;;Enable HTTP redirection to HTTPS

            app.UseHttpsRedirection()

            ;;-------------------------------------------------------
            ;;Configure the MVC & OData environments

            lambda mvcBuilder(builder)
            begin
                

            end

            ;;-------------------------------------------------------
            ;;Enable MVC

            ;;If there is a ConfigureCustomBeforeMvc method, call it
            ConfigureCustomBeforeMvc(app,env)

			app.UseRouting();
			app.UseCors();

			app.UseEndpoints(lambda(endpoints) { endpoints.MapControllers() })

            ;;-------------------------------------------------------
            ;;Configure the web server to serve static files

            ;;Support default files (index.html, etc.)
            app.UseDefaultFiles()

            ;;Support serving static files
            app.UseStaticFiles()

            ;;If there is a ConfigureCustom method, call it
            ConfigureCustom(app,env)

        endmethod

        .region "Partial method extensibility points"

        ;;; <summary>
        ;;; Declare the ConfigueServicesCustom partial method.
        ;;; Developers can implement this method in a partial class to provide custom services.
        ;;; </summary>
        ;;; <param name="services"></param>
        partial method ConfigureServicesCustom, void
            services, @IServiceCollection
        endmethod

        ;;; <summary>
        ;;; Declare the ConfigueCustom partial method
        ;;; Developers can implement this method in a partial class to provide custom configuration.
        ;;; </summary>
        ;;; <param name="app"></param>
        ;;; <param name="env"></param>
        partial method ConfigureCustom, void
            required in app, @IApplicationBuilder
            required in env, @IHostingEnvironment
        endmethod

        ;;; <summary>
        ;;; Declare the ConfigueCustom partial method called immediately before AddMvc
        ;;; Developers can implement this method in a partial class to provide custom configuration.
        ;;; </summary>
        ;;; <param name="app"></param>
        ;;; <param name="env"></param>
        partial method ConfigureCustomBeforeMvc, void
            required in app, @IApplicationBuilder
            required in env, @IHostingEnvironment
        endmethod

        .endregion

    endclass

endnamespace
